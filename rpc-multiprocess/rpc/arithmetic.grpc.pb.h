// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: arithmetic.proto
#ifndef GRPC_arithmetic_2eproto__INCLUDED
#define GRPC_arithmetic_2eproto__INCLUDED

#include "arithmetic.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace arithmetic {

// The arithmetic service definition.
class Arithmetic GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Exp(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>> AsyncExp(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>>(AsyncExpRaw(context, request, cq));
    }
    virtual ::grpc::Status Log(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>> AsyncLog(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>>(AsyncLogRaw(context, request, cq));
    }
    virtual ::grpc::Status Pow(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>> AsyncPow(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>>(AsyncPowRaw(context, request, cq));
    }
    virtual ::grpc::Status Sqrt(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>> AsyncSqrt(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>>(AsyncSqrtRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>* AsyncExpRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>* AsyncLogRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>* AsyncPowRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetic::ArithmeticReply>* AsyncSqrtRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Exp(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>> AsyncExp(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>>(AsyncExpRaw(context, request, cq));
    }
    ::grpc::Status Log(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>> AsyncLog(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>>(AsyncLogRaw(context, request, cq));
    }
    ::grpc::Status Pow(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>> AsyncPow(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>>(AsyncPowRaw(context, request, cq));
    }
    ::grpc::Status Sqrt(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::arithmetic::ArithmeticReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>> AsyncSqrt(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>>(AsyncSqrtRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>* AsyncExpRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>* AsyncLogRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>* AsyncPowRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::arithmetic::ArithmeticReply>* AsyncSqrtRaw(::grpc::ClientContext* context, const ::arithmetic::ArithmeticRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Exp_;
    const ::grpc::RpcMethod rpcmethod_Log_;
    const ::grpc::RpcMethod rpcmethod_Pow_;
    const ::grpc::RpcMethod rpcmethod_Sqrt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Exp(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response);
    virtual ::grpc::Status Log(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response);
    virtual ::grpc::Status Pow(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response);
    virtual ::grpc::Status Sqrt(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Exp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Exp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Exp() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exp(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExp(::grpc::ServerContext* context, ::arithmetic::ArithmeticRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetic::ArithmeticReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Log() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Log() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::arithmetic::ArithmeticRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetic::ArithmeticReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Pow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Pow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pow(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPow(::grpc::ServerContext* context, ::arithmetic::ArithmeticRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetic::ArithmeticReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sqrt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Sqrt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Sqrt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sqrt(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSqrt(::grpc::ServerContext* context, ::arithmetic::ArithmeticRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetic::ArithmeticReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Exp<WithAsyncMethod_Log<WithAsyncMethod_Pow<WithAsyncMethod_Sqrt<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Exp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Exp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Exp() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exp(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Log() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Log() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Pow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Pow() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pow(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sqrt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Sqrt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Sqrt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sqrt(::grpc::ServerContext* context, const ::arithmetic::ArithmeticRequest* request, ::arithmetic::ArithmeticReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace arithmetic


#endif  // GRPC_arithmetic_2eproto__INCLUDED
