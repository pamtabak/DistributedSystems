// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arithmetic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arithmetic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace arithmetic {

namespace {

const ::google::protobuf::Descriptor* ArithmeticRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArithmeticRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArithmeticReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArithmeticReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arithmetic_2eproto() {
  protobuf_AddDesc_arithmetic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arithmetic.proto");
  GOOGLE_CHECK(file != NULL);
  ArithmeticRequest_descriptor_ = file->message_type(0);
  static const int ArithmeticRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticRequest, vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticRequest, param_),
  };
  ArithmeticRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArithmeticRequest_descriptor_,
      ArithmeticRequest::default_instance_,
      ArithmeticRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArithmeticRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticRequest, _is_default_instance_));
  ArithmeticReply_descriptor_ = file->message_type(1);
  static const int ArithmeticReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticReply, vec_),
  };
  ArithmeticReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArithmeticReply_descriptor_,
      ArithmeticReply::default_instance_,
      ArithmeticReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArithmeticReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArithmeticReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arithmetic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArithmeticRequest_descriptor_, &ArithmeticRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArithmeticReply_descriptor_, &ArithmeticReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arithmetic_2eproto() {
  delete ArithmeticRequest::default_instance_;
  delete ArithmeticRequest_reflection_;
  delete ArithmeticReply::default_instance_;
  delete ArithmeticReply_reflection_;
}

void protobuf_AddDesc_arithmetic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020arithmetic.proto\022\narithmetic\"/\n\021Arithm"
    "eticRequest\022\013\n\003vec\030\001 \003(\001\022\r\n\005param\030\002 \001(\001\""
    "\036\n\017ArithmeticReply\022\013\n\003vec\030\001 \003(\0012\241\002\n\nArit"
    "hmetic\022C\n\003Exp\022\035.arithmetic.ArithmeticReq"
    "uest\032\033.arithmetic.ArithmeticReply\"\000\022C\n\003L"
    "og\022\035.arithmetic.ArithmeticRequest\032\033.arit"
    "hmetic.ArithmeticReply\"\000\022C\n\003Pow\022\035.arithm"
    "etic.ArithmeticRequest\032\033.arithmetic.Arit"
    "hmeticReply\"\000\022D\n\004Sqrt\022\035.arithmetic.Arith"
    "meticRequest\032\033.arithmetic.ArithmeticRepl"
    "y\"\000b\006proto3", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arithmetic.proto", &protobuf_RegisterTypes);
  ArithmeticRequest::default_instance_ = new ArithmeticRequest();
  ArithmeticReply::default_instance_ = new ArithmeticReply();
  ArithmeticRequest::default_instance_->InitAsDefaultInstance();
  ArithmeticReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arithmetic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arithmetic_2eproto {
  StaticDescriptorInitializer_arithmetic_2eproto() {
    protobuf_AddDesc_arithmetic_2eproto();
  }
} static_descriptor_initializer_arithmetic_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArithmeticRequest::kVecFieldNumber;
const int ArithmeticRequest::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArithmeticRequest::ArithmeticRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arithmetic.ArithmeticRequest)
}

void ArithmeticRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArithmeticRequest::ArithmeticRequest(const ArithmeticRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:arithmetic.ArithmeticRequest)
}

void ArithmeticRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  param_ = 0;
}

ArithmeticRequest::~ArithmeticRequest() {
  // @@protoc_insertion_point(destructor:arithmetic.ArithmeticRequest)
  SharedDtor();
}

void ArithmeticRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArithmeticRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArithmeticRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithmeticRequest_descriptor_;
}

const ArithmeticRequest& ArithmeticRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arithmetic_2eproto();
  return *default_instance_;
}

ArithmeticRequest* ArithmeticRequest::default_instance_ = NULL;

ArithmeticRequest* ArithmeticRequest::New(::google::protobuf::Arena* arena) const {
  ArithmeticRequest* n = new ArithmeticRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArithmeticRequest::Clear() {
  param_ = 0;
  vec_.Clear();
}

bool ArithmeticRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arithmetic.ArithmeticRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double vec = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vec())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_vec())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_param;
        break;
      }

      // optional double param = 2;
      case 2: {
        if (tag == 17) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &param_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arithmetic.ArithmeticRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arithmetic.ArithmeticRequest)
  return false;
#undef DO_
}

void ArithmeticRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arithmetic.ArithmeticRequest)
  // repeated double vec = 1;
  if (this->vec_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vec_cached_byte_size_);
  }
  for (int i = 0; i < this->vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->vec(i), output);
  }

  // optional double param = 2;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->param(), output);
  }

  // @@protoc_insertion_point(serialize_end:arithmetic.ArithmeticRequest)
}

::google::protobuf::uint8* ArithmeticRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:arithmetic.ArithmeticRequest)
  // repeated double vec = 1;
  if (this->vec_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vec_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vec(i), target);
  }

  // optional double param = 2;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->param(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:arithmetic.ArithmeticRequest)
  return target;
}

int ArithmeticRequest::ByteSize() const {
  int total_size = 0;

  // optional double param = 2;
  if (this->param() != 0) {
    total_size += 1 + 8;
  }

  // repeated double vec = 1;
  {
    int data_size = 0;
    data_size = 8 * this->vec_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vec_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArithmeticRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArithmeticRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArithmeticRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArithmeticRequest::MergeFrom(const ArithmeticRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vec_.MergeFrom(from.vec_);
  if (from.param() != 0) {
    set_param(from.param());
  }
}

void ArithmeticRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArithmeticRequest::CopyFrom(const ArithmeticRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArithmeticRequest::IsInitialized() const {

  return true;
}

void ArithmeticRequest::Swap(ArithmeticRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArithmeticRequest::InternalSwap(ArithmeticRequest* other) {
  vec_.UnsafeArenaSwap(&other->vec_);
  std::swap(param_, other->param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArithmeticRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArithmeticRequest_descriptor_;
  metadata.reflection = ArithmeticRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArithmeticRequest

// repeated double vec = 1;
int ArithmeticRequest::vec_size() const {
  return vec_.size();
}
void ArithmeticRequest::clear_vec() {
  vec_.Clear();
}
 double ArithmeticRequest::vec(int index) const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticRequest.vec)
  return vec_.Get(index);
}
 void ArithmeticRequest::set_vec(int index, double value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticRequest.vec)
}
 void ArithmeticRequest::add_vec(double value) {
  vec_.Add(value);
  // @@protoc_insertion_point(field_add:arithmetic.ArithmeticRequest.vec)
}
 const ::google::protobuf::RepeatedField< double >&
ArithmeticRequest::vec() const {
  // @@protoc_insertion_point(field_list:arithmetic.ArithmeticRequest.vec)
  return vec_;
}
 ::google::protobuf::RepeatedField< double >*
ArithmeticRequest::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:arithmetic.ArithmeticRequest.vec)
  return &vec_;
}

// optional double param = 2;
void ArithmeticRequest::clear_param() {
  param_ = 0;
}
 double ArithmeticRequest::param() const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticRequest.param)
  return param_;
}
 void ArithmeticRequest::set_param(double value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticRequest.param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArithmeticReply::kVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArithmeticReply::ArithmeticReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arithmetic.ArithmeticReply)
}

void ArithmeticReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArithmeticReply::ArithmeticReply(const ArithmeticReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:arithmetic.ArithmeticReply)
}

void ArithmeticReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ArithmeticReply::~ArithmeticReply() {
  // @@protoc_insertion_point(destructor:arithmetic.ArithmeticReply)
  SharedDtor();
}

void ArithmeticReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArithmeticReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArithmeticReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArithmeticReply_descriptor_;
}

const ArithmeticReply& ArithmeticReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arithmetic_2eproto();
  return *default_instance_;
}

ArithmeticReply* ArithmeticReply::default_instance_ = NULL;

ArithmeticReply* ArithmeticReply::New(::google::protobuf::Arena* arena) const {
  ArithmeticReply* n = new ArithmeticReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArithmeticReply::Clear() {
  vec_.Clear();
}

bool ArithmeticReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:arithmetic.ArithmeticReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double vec = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vec())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_vec())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:arithmetic.ArithmeticReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:arithmetic.ArithmeticReply)
  return false;
#undef DO_
}

void ArithmeticReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:arithmetic.ArithmeticReply)
  // repeated double vec = 1;
  if (this->vec_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vec_cached_byte_size_);
  }
  for (int i = 0; i < this->vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->vec(i), output);
  }

  // @@protoc_insertion_point(serialize_end:arithmetic.ArithmeticReply)
}

::google::protobuf::uint8* ArithmeticReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:arithmetic.ArithmeticReply)
  // repeated double vec = 1;
  if (this->vec_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vec_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vec(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:arithmetic.ArithmeticReply)
  return target;
}

int ArithmeticReply::ByteSize() const {
  int total_size = 0;

  // repeated double vec = 1;
  {
    int data_size = 0;
    data_size = 8 * this->vec_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vec_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArithmeticReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArithmeticReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArithmeticReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArithmeticReply::MergeFrom(const ArithmeticReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vec_.MergeFrom(from.vec_);
}

void ArithmeticReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArithmeticReply::CopyFrom(const ArithmeticReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArithmeticReply::IsInitialized() const {

  return true;
}

void ArithmeticReply::Swap(ArithmeticReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArithmeticReply::InternalSwap(ArithmeticReply* other) {
  vec_.UnsafeArenaSwap(&other->vec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArithmeticReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArithmeticReply_descriptor_;
  metadata.reflection = ArithmeticReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArithmeticReply

// repeated double vec = 1;
int ArithmeticReply::vec_size() const {
  return vec_.size();
}
void ArithmeticReply::clear_vec() {
  vec_.Clear();
}
 double ArithmeticReply::vec(int index) const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticReply.vec)
  return vec_.Get(index);
}
 void ArithmeticReply::set_vec(int index, double value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticReply.vec)
}
 void ArithmeticReply::add_vec(double value) {
  vec_.Add(value);
  // @@protoc_insertion_point(field_add:arithmetic.ArithmeticReply.vec)
}
 const ::google::protobuf::RepeatedField< double >&
ArithmeticReply::vec() const {
  // @@protoc_insertion_point(field_list:arithmetic.ArithmeticReply.vec)
  return vec_;
}
 ::google::protobuf::RepeatedField< double >*
ArithmeticReply::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:arithmetic.ArithmeticReply.vec)
  return &vec_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace arithmetic

// @@protoc_insertion_point(global_scope)
