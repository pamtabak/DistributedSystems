// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace adder {

namespace {

const ::google::protobuf::Descriptor* AdderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdderReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdderReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_adder_2eproto() {
  protobuf_AddDesc_adder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adder.proto");
  GOOGLE_CHECK(file != NULL);
  AdderRequest_descriptor_ = file->message_type(0);
  static const int AdderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderRequest, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderRequest, b_),
  };
  AdderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdderRequest_descriptor_,
      AdderRequest::default_instance_,
      AdderRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderRequest, _is_default_instance_));
  AdderReply_descriptor_ = file->message_type(1);
  static const int AdderReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderReply, sum_),
  };
  AdderReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdderReply_descriptor_,
      AdderReply::default_instance_,
      AdderReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdderReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdderReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdderRequest_descriptor_, &AdderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdderReply_descriptor_, &AdderReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adder_2eproto() {
  delete AdderRequest::default_instance_;
  delete AdderRequest_reflection_;
  delete AdderReply::default_instance_;
  delete AdderReply_reflection_;
}

void protobuf_AddDesc_adder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013adder.proto\022\005adder\"$\n\014AdderRequest\022\t\n\001"
    "a\030\001 \001(\005\022\t\n\001b\030\002 \001(\005\"\031\n\nAdderReply\022\013\n\003sum\030"
    "\001 \001(\00528\n\005Adder\022/\n\003Add\022\023.adder.AdderReque"
    "st\032\021.adder.AdderReply\"\000B\022\n\020io.grpc.examp"
    "lesb\006proto3", 171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adder.proto", &protobuf_RegisterTypes);
  AdderRequest::default_instance_ = new AdderRequest();
  AdderReply::default_instance_ = new AdderReply();
  AdderRequest::default_instance_->InitAsDefaultInstance();
  AdderReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adder_2eproto {
  StaticDescriptorInitializer_adder_2eproto() {
    protobuf_AddDesc_adder_2eproto();
  }
} static_descriptor_initializer_adder_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdderRequest::kAFieldNumber;
const int AdderRequest::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdderRequest::AdderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adder.AdderRequest)
}

void AdderRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdderRequest::AdderRequest(const AdderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:adder.AdderRequest)
}

void AdderRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
}

AdderRequest::~AdderRequest() {
  // @@protoc_insertion_point(destructor:adder.AdderRequest)
  SharedDtor();
}

void AdderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdderRequest_descriptor_;
}

const AdderRequest& AdderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adder_2eproto();
  return *default_instance_;
}

AdderRequest* AdderRequest::default_instance_ = NULL;

AdderRequest* AdderRequest::New(::google::protobuf::Arena* arena) const {
  AdderRequest* n = new AdderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdderRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdderRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(a_, b_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adder.AdderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional int32 b = 2;
      case 2: {
        if (tag == 16) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adder.AdderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adder.AdderRequest)
  return false;
#undef DO_
}

void AdderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adder.AdderRequest)
  // optional int32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // optional int32 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:adder.AdderRequest)
}

::google::protobuf::uint8* AdderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adder.AdderRequest)
  // optional int32 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // optional int32 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adder.AdderRequest)
  return target;
}

int AdderRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a());
  }

  // optional int32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdderRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdderRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdderRequest::MergeFrom(const AdderRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void AdderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdderRequest::CopyFrom(const AdderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdderRequest::IsInitialized() const {

  return true;
}

void AdderRequest::Swap(AdderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdderRequest::InternalSwap(AdderRequest* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdderRequest_descriptor_;
  metadata.reflection = AdderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdderRequest

// optional int32 a = 1;
void AdderRequest::clear_a() {
  a_ = 0;
}
 ::google::protobuf::int32 AdderRequest::a() const {
  // @@protoc_insertion_point(field_get:adder.AdderRequest.a)
  return a_;
}
 void AdderRequest::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:adder.AdderRequest.a)
}

// optional int32 b = 2;
void AdderRequest::clear_b() {
  b_ = 0;
}
 ::google::protobuf::int32 AdderRequest::b() const {
  // @@protoc_insertion_point(field_get:adder.AdderRequest.b)
  return b_;
}
 void AdderRequest::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:adder.AdderRequest.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdderReply::kSumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdderReply::AdderReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adder.AdderReply)
}

void AdderReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdderReply::AdderReply(const AdderReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:adder.AdderReply)
}

void AdderReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sum_ = 0;
}

AdderReply::~AdderReply() {
  // @@protoc_insertion_point(destructor:adder.AdderReply)
  SharedDtor();
}

void AdderReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdderReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdderReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdderReply_descriptor_;
}

const AdderReply& AdderReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adder_2eproto();
  return *default_instance_;
}

AdderReply* AdderReply::default_instance_ = NULL;

AdderReply* AdderReply::New(::google::protobuf::Arena* arena) const {
  AdderReply* n = new AdderReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdderReply::Clear() {
  sum_ = 0;
}

bool AdderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adder.AdderReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adder.AdderReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adder.AdderReply)
  return false;
#undef DO_
}

void AdderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adder.AdderReply)
  // optional int32 sum = 1;
  if (this->sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sum(), output);
  }

  // @@protoc_insertion_point(serialize_end:adder.AdderReply)
}

::google::protobuf::uint8* AdderReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adder.AdderReply)
  // optional int32 sum = 1;
  if (this->sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:adder.AdderReply)
  return target;
}

int AdderReply::ByteSize() const {
  int total_size = 0;

  // optional int32 sum = 1;
  if (this->sum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sum());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdderReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdderReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdderReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdderReply::MergeFrom(const AdderReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sum() != 0) {
    set_sum(from.sum());
  }
}

void AdderReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdderReply::CopyFrom(const AdderReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdderReply::IsInitialized() const {

  return true;
}

void AdderReply::Swap(AdderReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdderReply::InternalSwap(AdderReply* other) {
  std::swap(sum_, other->sum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdderReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdderReply_descriptor_;
  metadata.reflection = AdderReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdderReply

// optional int32 sum = 1;
void AdderReply::clear_sum() {
  sum_ = 0;
}
 ::google::protobuf::int32 AdderReply::sum() const {
  // @@protoc_insertion_point(field_get:adder.AdderReply.sum)
  return sum_;
}
 void AdderReply::set_sum(::google::protobuf::int32 value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:adder.AdderReply.sum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace adder

// @@protoc_insertion_point(global_scope)
