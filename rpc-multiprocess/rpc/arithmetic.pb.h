// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arithmetic.proto

#ifndef PROTOBUF_arithmetic_2eproto__INCLUDED
#define PROTOBUF_arithmetic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace arithmetic {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_arithmetic_2eproto();
void protobuf_AssignDesc_arithmetic_2eproto();
void protobuf_ShutdownFile_arithmetic_2eproto();

class ArithmeticReply;
class ArithmeticRequest;

// ===================================================================

class ArithmeticRequest : public ::google::protobuf::Message {
 public:
  ArithmeticRequest();
  virtual ~ArithmeticRequest();

  ArithmeticRequest(const ArithmeticRequest& from);

  inline ArithmeticRequest& operator=(const ArithmeticRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArithmeticRequest& default_instance();

  void Swap(ArithmeticRequest* other);

  // implements Message ----------------------------------------------

  inline ArithmeticRequest* New() const { return New(NULL); }

  ArithmeticRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArithmeticRequest& from);
  void MergeFrom(const ArithmeticRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArithmeticRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double vec = 1;
  int vec_size() const;
  void clear_vec();
  static const int kVecFieldNumber = 1;
  double vec(int index) const;
  void set_vec(int index, double value);
  void add_vec(double value);
  const ::google::protobuf::RepeatedField< double >&
      vec() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vec();

  // optional double param = 2;
  void clear_param();
  static const int kParamFieldNumber = 2;
  double param() const;
  void set_param(double value);

  // @@protoc_insertion_point(class_scope:arithmetic.ArithmeticRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > vec_;
  mutable int _vec_cached_byte_size_;
  double param_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_arithmetic_2eproto();
  friend void protobuf_AssignDesc_arithmetic_2eproto();
  friend void protobuf_ShutdownFile_arithmetic_2eproto();

  void InitAsDefaultInstance();
  static ArithmeticRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArithmeticReply : public ::google::protobuf::Message {
 public:
  ArithmeticReply();
  virtual ~ArithmeticReply();

  ArithmeticReply(const ArithmeticReply& from);

  inline ArithmeticReply& operator=(const ArithmeticReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArithmeticReply& default_instance();

  void Swap(ArithmeticReply* other);

  // implements Message ----------------------------------------------

  inline ArithmeticReply* New() const { return New(NULL); }

  ArithmeticReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArithmeticReply& from);
  void MergeFrom(const ArithmeticReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArithmeticReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double vec = 1;
  int vec_size() const;
  void clear_vec();
  static const int kVecFieldNumber = 1;
  double vec(int index) const;
  void set_vec(int index, double value);
  void add_vec(double value);
  const ::google::protobuf::RepeatedField< double >&
      vec() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vec();

  // @@protoc_insertion_point(class_scope:arithmetic.ArithmeticReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > vec_;
  mutable int _vec_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_arithmetic_2eproto();
  friend void protobuf_AssignDesc_arithmetic_2eproto();
  friend void protobuf_ShutdownFile_arithmetic_2eproto();

  void InitAsDefaultInstance();
  static ArithmeticReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ArithmeticRequest

// repeated double vec = 1;
inline int ArithmeticRequest::vec_size() const {
  return vec_.size();
}
inline void ArithmeticRequest::clear_vec() {
  vec_.Clear();
}
inline double ArithmeticRequest::vec(int index) const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticRequest.vec)
  return vec_.Get(index);
}
inline void ArithmeticRequest::set_vec(int index, double value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticRequest.vec)
}
inline void ArithmeticRequest::add_vec(double value) {
  vec_.Add(value);
  // @@protoc_insertion_point(field_add:arithmetic.ArithmeticRequest.vec)
}
inline const ::google::protobuf::RepeatedField< double >&
ArithmeticRequest::vec() const {
  // @@protoc_insertion_point(field_list:arithmetic.ArithmeticRequest.vec)
  return vec_;
}
inline ::google::protobuf::RepeatedField< double >*
ArithmeticRequest::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:arithmetic.ArithmeticRequest.vec)
  return &vec_;
}

// optional double param = 2;
inline void ArithmeticRequest::clear_param() {
  param_ = 0;
}
inline double ArithmeticRequest::param() const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticRequest.param)
  return param_;
}
inline void ArithmeticRequest::set_param(double value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticRequest.param)
}

// -------------------------------------------------------------------

// ArithmeticReply

// repeated double vec = 1;
inline int ArithmeticReply::vec_size() const {
  return vec_.size();
}
inline void ArithmeticReply::clear_vec() {
  vec_.Clear();
}
inline double ArithmeticReply::vec(int index) const {
  // @@protoc_insertion_point(field_get:arithmetic.ArithmeticReply.vec)
  return vec_.Get(index);
}
inline void ArithmeticReply::set_vec(int index, double value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:arithmetic.ArithmeticReply.vec)
}
inline void ArithmeticReply::add_vec(double value) {
  vec_.Add(value);
  // @@protoc_insertion_point(field_add:arithmetic.ArithmeticReply.vec)
}
inline const ::google::protobuf::RepeatedField< double >&
ArithmeticReply::vec() const {
  // @@protoc_insertion_point(field_list:arithmetic.ArithmeticReply.vec)
  return vec_;
}
inline ::google::protobuf::RepeatedField< double >*
ArithmeticReply::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:arithmetic.ArithmeticReply.vec)
  return &vec_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace arithmetic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_arithmetic_2eproto__INCLUDED
